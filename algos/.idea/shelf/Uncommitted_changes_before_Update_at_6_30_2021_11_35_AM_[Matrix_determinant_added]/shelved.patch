Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 1049ebe237d6f59b3945403e109043c898a70e4b)
+++ /dev/null	(revision 1049ebe237d6f59b3945403e109043c898a70e4b)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: src/main/java/kata/Matrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kata/Matrix.java b/src/main/java/kata/Matrix.java
new file mode 100644
--- /dev/null	(date 1625043460239)
+++ b/src/main/java/kata/Matrix.java	(date 1625043460239)
@@ -0,0 +1,34 @@
+package kata;
+
+public class Matrix {
+  public static int determinant(int[][] matrix) {
+    int[][] temporary;
+    int result = 0;
+
+    if (matrix.length == 1) {
+      result = matrix[0][0];
+      return (result);
+    }
+
+    if (matrix.length == 2) {
+      result = ((matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0]));
+      return (result);
+    }
+
+    for (int i = 0; i < matrix[0].length; i++) {
+      temporary = new int[matrix.length - 1][matrix[0].length - 1];
+
+      for (int j = 1; j < matrix.length; j++) {
+        for (int k = 0; k < matrix[0].length; k++) {
+          if (k < i) {
+            temporary[j - 1][k] = matrix[j][k];
+          } else if (k > i) {
+            temporary[j - 1][k - 1] = matrix[j][k];
+          }
+        }
+      }
+      result += matrix[0][i] * Math.pow(-1, i) * determinant(temporary);
+    }
+    return (result);
+  }
+}
Index: src/test/java/kata/MatrixTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/kata/MatrixTest.java b/src/test/java/kata/MatrixTest.java
new file mode 100644
--- /dev/null	(date 1625044579278)
+++ b/src/test/java/kata/MatrixTest.java	(date 1625044579278)
@@ -0,0 +1,51 @@
+package kata;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.junit.jupiter.api.Test;
+
+class MatrixTest {
+
+  //{ { 1, 3 }, { 2, 5 } },
+  //{ { 2, 5, 3 }, { 1, -2, -1 }, { 1, 3, 4 } } };
+  private static int[] expected = { 1, -1, -20 };
+  private static String[] msg = { "Determinant of a 1 x 1 matrix yields the value of the one element",
+    "Should return 1 * 5 - 3 * 2 == -1 ",
+    "" };
+  private Matrix underTest;
+
+  @Test
+  public void determinantShouldReturnOneIfOnlyOneElementContainsWhichIsOne() {
+    int[][] matrix = { { 1 } };
+    assertEquals(1, Matrix.determinant(matrix), "Determinant of a 1 x 1 matrix yields the value of the one element");
+  }
+
+  @Test
+  public void determinantShouldReturnTwoIfOnlyOneElementContainsWhichIsTwo() {
+    int[][] matrix = { { 2 } };
+    assertEquals(2, Matrix.determinant(matrix), "Determinant of a 1 x 1 matrix yields the value of the one element");
+  }
+
+  @Test
+  public void sampleTests() {
+    int[][] matrix = { { 1, 3 },
+      { 2, 5 } };
+    assertEquals(-1, Matrix.determinant(matrix), "Determinant of a 1 x 1 matrix yields the value of the one element");
+  }
+
+  @Test
+  public void determinantWithMoreThanTwoDMatrixShouldReturnZero() {
+    int[][] matrix = { { 0, 0, 0 },
+      { 0, 0, 0 },
+      { 0, 0, 0 } };
+    assertEquals(0, Matrix.determinant(matrix), "Determinant of a 1 x 1 matrix yields the value of the one element");
+  }
+
+  @Test
+  public void determinantWithMoreThanTwoDMatrixShouldReturnMinusTwenty() {
+    int[][] matrix = { { 2, 5, 3 },
+      { 1, -2, -1 },
+      { 1, 3, 4 } };
+    assertEquals(-20, Matrix.determinant(matrix), "Determinant of a 1 x 1 matrix yields the value of the one element");
+  }
+}
